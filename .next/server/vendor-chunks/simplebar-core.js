/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/simplebar-core";
exports.ids = ["vendor-chunks/simplebar-core"];
exports.modules = {

/***/ "(ssr)/./node_modules/simplebar-core/dist/index.cjs":
/*!****************************************************!*\
  !*** ./node_modules/simplebar-core/dist/index.cjs ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/**\n * simplebar-core - v1.2.4\n * Scrollbars, simpler.\n * https://grsmto.github.io/simplebar/\n *\n * Made by Adrien Denat from a fork by Jonathan Nicol\n * Under MIT License\n */\n\n(function (global, factory) {\n     true ? module.exports = factory(__webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\"), __webpack_require__(/*! can-use-dom */ \"(ssr)/./node_modules/can-use-dom/index.js\")) :\n    0;\n})(this, (function (lodashEs, canUseDOM) { 'use strict';\n\n    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n    var canUseDOM__default = /*#__PURE__*/_interopDefaultLegacy(canUseDOM);\n\n    /******************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\n\n    var cachedScrollbarWidth = null;\n    var cachedDevicePixelRatio = null;\n    if (canUseDOM__default[\"default\"]) {\n        window.addEventListener('resize', function () {\n            if (cachedDevicePixelRatio !== window.devicePixelRatio) {\n                cachedDevicePixelRatio = window.devicePixelRatio;\n                cachedScrollbarWidth = null;\n            }\n        });\n    }\n    function scrollbarWidth() {\n        if (cachedScrollbarWidth === null) {\n            if (typeof document === 'undefined') {\n                cachedScrollbarWidth = 0;\n                return cachedScrollbarWidth;\n            }\n            var body = document.body;\n            var box = document.createElement('div');\n            box.classList.add('simplebar-hide-scrollbar');\n            body.appendChild(box);\n            var width = box.getBoundingClientRect().right;\n            body.removeChild(box);\n            cachedScrollbarWidth = width;\n        }\n        return cachedScrollbarWidth;\n    }\n\n    function getElementWindow$1(element) {\n        if (!element ||\n            !element.ownerDocument ||\n            !element.ownerDocument.defaultView) {\n            return window;\n        }\n        return element.ownerDocument.defaultView;\n    }\n    function getElementDocument$1(element) {\n        if (!element || !element.ownerDocument) {\n            return document;\n        }\n        return element.ownerDocument;\n    }\n    // Helper function to retrieve options from element attributes\n    var getOptions$1 = function (obj) {\n        var initialObj = {};\n        var options = Array.prototype.reduce.call(obj, function (acc, attribute) {\n            var option = attribute.name.match(/data-simplebar-(.+)/);\n            if (option) {\n                var key = option[1].replace(/\\W+(.)/g, function (_, chr) { return chr.toUpperCase(); });\n                switch (attribute.value) {\n                    case 'true':\n                        acc[key] = true;\n                        break;\n                    case 'false':\n                        acc[key] = false;\n                        break;\n                    case undefined:\n                        acc[key] = true;\n                        break;\n                    default:\n                        acc[key] = attribute.value;\n                }\n            }\n            return acc;\n        }, initialObj);\n        return options;\n    };\n    function addClasses$1(el, classes) {\n        var _a;\n        if (!el)\n            return;\n        (_a = el.classList).add.apply(_a, classes.split(' '));\n    }\n    function removeClasses$1(el, classes) {\n        if (!el)\n            return;\n        classes.split(' ').forEach(function (className) {\n            el.classList.remove(className);\n        });\n    }\n    function classNamesToQuery$1(classNames) {\n        return \".\".concat(classNames.split(' ').join('.'));\n    }\n\n    var helpers = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getElementWindow: getElementWindow$1,\n        getElementDocument: getElementDocument$1,\n        getOptions: getOptions$1,\n        addClasses: addClasses$1,\n        removeClasses: removeClasses$1,\n        classNamesToQuery: classNamesToQuery$1\n    });\n\n    var getElementWindow = getElementWindow$1, getElementDocument = getElementDocument$1, getOptions = getOptions$1, addClasses = addClasses$1, removeClasses = removeClasses$1, classNamesToQuery = classNamesToQuery$1;\n    var SimpleBarCore = /** @class */ (function () {\n        function SimpleBarCore(element, options) {\n            if (options === void 0) { options = {}; }\n            var _this = this;\n            this.removePreventClickId = null;\n            this.minScrollbarWidth = 20;\n            this.stopScrollDelay = 175;\n            this.isScrolling = false;\n            this.isMouseEntering = false;\n            this.scrollXTicking = false;\n            this.scrollYTicking = false;\n            this.wrapperEl = null;\n            this.contentWrapperEl = null;\n            this.contentEl = null;\n            this.offsetEl = null;\n            this.maskEl = null;\n            this.placeholderEl = null;\n            this.heightAutoObserverWrapperEl = null;\n            this.heightAutoObserverEl = null;\n            this.rtlHelpers = null;\n            this.scrollbarWidth = 0;\n            this.resizeObserver = null;\n            this.mutationObserver = null;\n            this.elStyles = null;\n            this.isRtl = null;\n            this.mouseX = 0;\n            this.mouseY = 0;\n            this.onMouseMove = function () { };\n            this.onWindowResize = function () { };\n            this.onStopScrolling = function () { };\n            this.onMouseEntered = function () { };\n            /**\n             * On scroll event handling\n             */\n            this.onScroll = function () {\n                var elWindow = getElementWindow(_this.el);\n                if (!_this.scrollXTicking) {\n                    elWindow.requestAnimationFrame(_this.scrollX);\n                    _this.scrollXTicking = true;\n                }\n                if (!_this.scrollYTicking) {\n                    elWindow.requestAnimationFrame(_this.scrollY);\n                    _this.scrollYTicking = true;\n                }\n                if (!_this.isScrolling) {\n                    _this.isScrolling = true;\n                    addClasses(_this.el, _this.classNames.scrolling);\n                }\n                _this.showScrollbar('x');\n                _this.showScrollbar('y');\n                _this.onStopScrolling();\n            };\n            this.scrollX = function () {\n                if (_this.axis.x.isOverflowing) {\n                    _this.positionScrollbar('x');\n                }\n                _this.scrollXTicking = false;\n            };\n            this.scrollY = function () {\n                if (_this.axis.y.isOverflowing) {\n                    _this.positionScrollbar('y');\n                }\n                _this.scrollYTicking = false;\n            };\n            this._onStopScrolling = function () {\n                removeClasses(_this.el, _this.classNames.scrolling);\n                if (_this.options.autoHide) {\n                    _this.hideScrollbar('x');\n                    _this.hideScrollbar('y');\n                }\n                _this.isScrolling = false;\n            };\n            this.onMouseEnter = function () {\n                if (!_this.isMouseEntering) {\n                    addClasses(_this.el, _this.classNames.mouseEntered);\n                    _this.showScrollbar('x');\n                    _this.showScrollbar('y');\n                    _this.isMouseEntering = true;\n                }\n                _this.onMouseEntered();\n            };\n            this._onMouseEntered = function () {\n                removeClasses(_this.el, _this.classNames.mouseEntered);\n                if (_this.options.autoHide) {\n                    _this.hideScrollbar('x');\n                    _this.hideScrollbar('y');\n                }\n                _this.isMouseEntering = false;\n            };\n            this._onMouseMove = function (e) {\n                _this.mouseX = e.clientX;\n                _this.mouseY = e.clientY;\n                if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n                    _this.onMouseMoveForAxis('x');\n                }\n                if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n                    _this.onMouseMoveForAxis('y');\n                }\n            };\n            this.onMouseLeave = function () {\n                _this.onMouseMove.cancel();\n                if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n                    _this.onMouseLeaveForAxis('x');\n                }\n                if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n                    _this.onMouseLeaveForAxis('y');\n                }\n                _this.mouseX = -1;\n                _this.mouseY = -1;\n            };\n            this._onWindowResize = function () {\n                // Recalculate scrollbarWidth in case it's a zoom\n                _this.scrollbarWidth = _this.getScrollbarWidth();\n                _this.hideNativeScrollbar();\n            };\n            this.onPointerEvent = function (e) {\n                if (!_this.axis.x.track.el ||\n                    !_this.axis.y.track.el ||\n                    !_this.axis.x.scrollbar.el ||\n                    !_this.axis.y.scrollbar.el)\n                    return;\n                var isWithinTrackXBounds, isWithinTrackYBounds;\n                _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();\n                _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();\n                if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n                    isWithinTrackXBounds = _this.isWithinBounds(_this.axis.x.track.rect);\n                }\n                if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n                    isWithinTrackYBounds = _this.isWithinBounds(_this.axis.y.track.rect);\n                }\n                // If any pointer event is called on the scrollbar\n                if (isWithinTrackXBounds || isWithinTrackYBounds) {\n                    // Prevent event leaking\n                    e.stopPropagation();\n                    if (e.type === 'pointerdown' && e.pointerType !== 'touch') {\n                        if (isWithinTrackXBounds) {\n                            _this.axis.x.scrollbar.rect =\n                                _this.axis.x.scrollbar.el.getBoundingClientRect();\n                            if (_this.isWithinBounds(_this.axis.x.scrollbar.rect)) {\n                                _this.onDragStart(e, 'x');\n                            }\n                            else {\n                                _this.onTrackClick(e, 'x');\n                            }\n                        }\n                        if (isWithinTrackYBounds) {\n                            _this.axis.y.scrollbar.rect =\n                                _this.axis.y.scrollbar.el.getBoundingClientRect();\n                            if (_this.isWithinBounds(_this.axis.y.scrollbar.rect)) {\n                                _this.onDragStart(e, 'y');\n                            }\n                            else {\n                                _this.onTrackClick(e, 'y');\n                            }\n                        }\n                    }\n                }\n            };\n            /**\n             * Drag scrollbar handle\n             */\n            this.drag = function (e) {\n                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n                if (!_this.draggedAxis || !_this.contentWrapperEl)\n                    return;\n                var eventOffset;\n                var track = _this.axis[_this.draggedAxis].track;\n                var trackSize = (_b = (_a = track.rect) === null || _a === void 0 ? void 0 : _a[_this.axis[_this.draggedAxis].sizeAttr]) !== null && _b !== void 0 ? _b : 0;\n                var scrollbar = _this.axis[_this.draggedAxis].scrollbar;\n                var contentSize = (_d = (_c = _this.contentWrapperEl) === null || _c === void 0 ? void 0 : _c[_this.axis[_this.draggedAxis].scrollSizeAttr]) !== null && _d !== void 0 ? _d : 0;\n                var hostSize = parseInt((_f = (_e = _this.elStyles) === null || _e === void 0 ? void 0 : _e[_this.axis[_this.draggedAxis].sizeAttr]) !== null && _f !== void 0 ? _f : '0px', 10);\n                e.preventDefault();\n                e.stopPropagation();\n                if (_this.draggedAxis === 'y') {\n                    eventOffset = e.pageY;\n                }\n                else {\n                    eventOffset = e.pageX;\n                }\n                // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).\n                var dragPos = eventOffset -\n                    ((_h = (_g = track.rect) === null || _g === void 0 ? void 0 : _g[_this.axis[_this.draggedAxis].offsetAttr]) !== null && _h !== void 0 ? _h : 0) -\n                    _this.axis[_this.draggedAxis].dragOffset;\n                dragPos = _this.draggedAxis === 'x' && _this.isRtl\n                    ? ((_k = (_j = track.rect) === null || _j === void 0 ? void 0 : _j[_this.axis[_this.draggedAxis].sizeAttr]) !== null && _k !== void 0 ? _k : 0) -\n                        scrollbar.size -\n                        dragPos\n                    : dragPos;\n                // Convert the mouse position into a percentage of the scrollbar height/width.\n                var dragPerc = dragPos / (trackSize - scrollbar.size);\n                // Scroll the content by the same percentage.\n                var scrollPos = dragPerc * (contentSize - hostSize);\n                // Fix browsers inconsistency on RTL\n                if (_this.draggedAxis === 'x' && _this.isRtl) {\n                    scrollPos = ((_l = SimpleBarCore.getRtlHelpers()) === null || _l === void 0 ? void 0 : _l.isScrollingToNegative)\n                        ? -scrollPos\n                        : scrollPos;\n                }\n                _this.contentWrapperEl[_this.axis[_this.draggedAxis].scrollOffsetAttr] =\n                    scrollPos;\n            };\n            /**\n             * End scroll handle drag\n             */\n            this.onEndDrag = function (e) {\n                var elDocument = getElementDocument(_this.el);\n                var elWindow = getElementWindow(_this.el);\n                e.preventDefault();\n                e.stopPropagation();\n                removeClasses(_this.el, _this.classNames.dragging);\n                elDocument.removeEventListener('mousemove', _this.drag, true);\n                elDocument.removeEventListener('mouseup', _this.onEndDrag, true);\n                _this.removePreventClickId = elWindow.setTimeout(function () {\n                    // Remove these asynchronously so we still suppress click events\n                    // generated simultaneously with mouseup.\n                    elDocument.removeEventListener('click', _this.preventClick, true);\n                    elDocument.removeEventListener('dblclick', _this.preventClick, true);\n                    _this.removePreventClickId = null;\n                });\n            };\n            /**\n             * Handler to ignore click events during drag\n             */\n            this.preventClick = function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n            };\n            this.el = element;\n            this.options = __assign(__assign({}, SimpleBarCore.defaultOptions), options);\n            this.classNames = __assign(__assign({}, SimpleBarCore.defaultOptions.classNames), options.classNames);\n            this.axis = {\n                x: {\n                    scrollOffsetAttr: 'scrollLeft',\n                    sizeAttr: 'width',\n                    scrollSizeAttr: 'scrollWidth',\n                    offsetSizeAttr: 'offsetWidth',\n                    offsetAttr: 'left',\n                    overflowAttr: 'overflowX',\n                    dragOffset: 0,\n                    isOverflowing: true,\n                    forceVisible: false,\n                    track: { size: null, el: null, rect: null, isVisible: false },\n                    scrollbar: { size: null, el: null, rect: null, isVisible: false }\n                },\n                y: {\n                    scrollOffsetAttr: 'scrollTop',\n                    sizeAttr: 'height',\n                    scrollSizeAttr: 'scrollHeight',\n                    offsetSizeAttr: 'offsetHeight',\n                    offsetAttr: 'top',\n                    overflowAttr: 'overflowY',\n                    dragOffset: 0,\n                    isOverflowing: true,\n                    forceVisible: false,\n                    track: { size: null, el: null, rect: null, isVisible: false },\n                    scrollbar: { size: null, el: null, rect: null, isVisible: false }\n                }\n            };\n            if (typeof this.el !== 'object' || !this.el.nodeName) {\n                throw new Error(\"Argument passed to SimpleBar must be an HTML element instead of \".concat(this.el));\n            }\n            this.onMouseMove = lodashEs.throttle(this._onMouseMove, 64);\n            this.onWindowResize = lodashEs.debounce(this._onWindowResize, 64, { leading: true });\n            this.onStopScrolling = lodashEs.debounce(this._onStopScrolling, this.stopScrollDelay);\n            this.onMouseEntered = lodashEs.debounce(this._onMouseEntered, this.stopScrollDelay);\n            this.init();\n        }\n        /**\n         * Helper to fix browsers inconsistency on RTL:\n         *  - Firefox inverts the scrollbar initial position\n         *  - IE11 inverts both scrollbar position and scrolling offset\n         * Directly inspired by @KingSora's OverlayScrollbars https://github.com/KingSora/OverlayScrollbars/blob/master/js/OverlayScrollbars.js#L1634\n         */\n        SimpleBarCore.getRtlHelpers = function () {\n            if (SimpleBarCore.rtlHelpers) {\n                return SimpleBarCore.rtlHelpers;\n            }\n            var dummyDiv = document.createElement('div');\n            dummyDiv.innerHTML =\n                '<div class=\"simplebar-dummy-scrollbar-size\"><div></div></div>';\n            var scrollbarDummyEl = dummyDiv.firstElementChild;\n            var dummyChild = scrollbarDummyEl === null || scrollbarDummyEl === void 0 ? void 0 : scrollbarDummyEl.firstElementChild;\n            if (!dummyChild)\n                return null;\n            document.body.appendChild(scrollbarDummyEl);\n            scrollbarDummyEl.scrollLeft = 0;\n            var dummyContainerOffset = SimpleBarCore.getOffset(scrollbarDummyEl);\n            var dummyChildOffset = SimpleBarCore.getOffset(dummyChild);\n            scrollbarDummyEl.scrollLeft = -999;\n            var dummyChildOffsetAfterScroll = SimpleBarCore.getOffset(dummyChild);\n            document.body.removeChild(scrollbarDummyEl);\n            SimpleBarCore.rtlHelpers = {\n                // determines if the scrolling is responding with negative values\n                isScrollOriginAtZero: dummyContainerOffset.left !== dummyChildOffset.left,\n                // determines if the origin scrollbar position is inverted or not (positioned on left or right)\n                isScrollingToNegative: dummyChildOffset.left !== dummyChildOffsetAfterScroll.left\n            };\n            return SimpleBarCore.rtlHelpers;\n        };\n        SimpleBarCore.prototype.getScrollbarWidth = function () {\n            // Try/catch for FF 56 throwing on undefined computedStyles\n            try {\n                // Detect browsers supporting CSS scrollbar styling and do not calculate\n                if ((this.contentWrapperEl &&\n                    getComputedStyle(this.contentWrapperEl, '::-webkit-scrollbar')\n                        .display === 'none') ||\n                    'scrollbarWidth' in document.documentElement.style ||\n                    '-ms-overflow-style' in document.documentElement.style) {\n                    return 0;\n                }\n                else {\n                    return scrollbarWidth();\n                }\n            }\n            catch (e) {\n                return scrollbarWidth();\n            }\n        };\n        SimpleBarCore.getOffset = function (el) {\n            var rect = el.getBoundingClientRect();\n            var elDocument = getElementDocument(el);\n            var elWindow = getElementWindow(el);\n            return {\n                top: rect.top +\n                    (elWindow.pageYOffset || elDocument.documentElement.scrollTop),\n                left: rect.left +\n                    (elWindow.pageXOffset || elDocument.documentElement.scrollLeft)\n            };\n        };\n        SimpleBarCore.prototype.init = function () {\n            // We stop here on server-side\n            if (canUseDOM__default[\"default\"]) {\n                this.initDOM();\n                this.rtlHelpers = SimpleBarCore.getRtlHelpers();\n                this.scrollbarWidth = this.getScrollbarWidth();\n                this.recalculate();\n                this.initListeners();\n            }\n        };\n        SimpleBarCore.prototype.initDOM = function () {\n            var _a, _b;\n            // assume that element has his DOM already initiated\n            this.wrapperEl = this.el.querySelector(classNamesToQuery(this.classNames.wrapper));\n            this.contentWrapperEl =\n                this.options.scrollableNode ||\n                    this.el.querySelector(classNamesToQuery(this.classNames.contentWrapper));\n            this.contentEl =\n                this.options.contentNode ||\n                    this.el.querySelector(classNamesToQuery(this.classNames.contentEl));\n            this.offsetEl = this.el.querySelector(classNamesToQuery(this.classNames.offset));\n            this.maskEl = this.el.querySelector(classNamesToQuery(this.classNames.mask));\n            this.placeholderEl = this.findChild(this.wrapperEl, classNamesToQuery(this.classNames.placeholder));\n            this.heightAutoObserverWrapperEl = this.el.querySelector(classNamesToQuery(this.classNames.heightAutoObserverWrapperEl));\n            this.heightAutoObserverEl = this.el.querySelector(classNamesToQuery(this.classNames.heightAutoObserverEl));\n            this.axis.x.track.el = this.findChild(this.el, \"\".concat(classNamesToQuery(this.classNames.track)).concat(classNamesToQuery(this.classNames.horizontal)));\n            this.axis.y.track.el = this.findChild(this.el, \"\".concat(classNamesToQuery(this.classNames.track)).concat(classNamesToQuery(this.classNames.vertical)));\n            this.axis.x.scrollbar.el =\n                ((_a = this.axis.x.track.el) === null || _a === void 0 ? void 0 : _a.querySelector(classNamesToQuery(this.classNames.scrollbar))) || null;\n            this.axis.y.scrollbar.el =\n                ((_b = this.axis.y.track.el) === null || _b === void 0 ? void 0 : _b.querySelector(classNamesToQuery(this.classNames.scrollbar))) || null;\n            if (!this.options.autoHide) {\n                addClasses(this.axis.x.scrollbar.el, this.classNames.visible);\n                addClasses(this.axis.y.scrollbar.el, this.classNames.visible);\n            }\n        };\n        SimpleBarCore.prototype.initListeners = function () {\n            var _this = this;\n            var _a;\n            var elWindow = getElementWindow(this.el);\n            // Event listeners\n            this.el.addEventListener('mouseenter', this.onMouseEnter);\n            this.el.addEventListener('pointerdown', this.onPointerEvent, true);\n            this.el.addEventListener('mousemove', this.onMouseMove);\n            this.el.addEventListener('mouseleave', this.onMouseLeave);\n            (_a = this.contentWrapperEl) === null || _a === void 0 ? void 0 : _a.addEventListener('scroll', this.onScroll);\n            // Browser zoom triggers a window resize\n            elWindow.addEventListener('resize', this.onWindowResize);\n            if (!this.contentEl)\n                return;\n            if (window.ResizeObserver) {\n                // Hack for https://github.com/WICG/ResizeObserver/issues/38\n                var resizeObserverStarted_1 = false;\n                var resizeObserver = elWindow.ResizeObserver || ResizeObserver;\n                this.resizeObserver = new resizeObserver(function () {\n                    if (!resizeObserverStarted_1)\n                        return;\n                    elWindow.requestAnimationFrame(function () {\n                        _this.recalculate();\n                    });\n                });\n                this.resizeObserver.observe(this.el);\n                this.resizeObserver.observe(this.contentEl);\n                elWindow.requestAnimationFrame(function () {\n                    resizeObserverStarted_1 = true;\n                });\n            }\n            // This is required to detect horizontal scroll. Vertical scroll only needs the resizeObserver.\n            this.mutationObserver = new elWindow.MutationObserver(function () {\n                elWindow.requestAnimationFrame(function () {\n                    _this.recalculate();\n                });\n            });\n            this.mutationObserver.observe(this.contentEl, {\n                childList: true,\n                subtree: true,\n                characterData: true\n            });\n        };\n        SimpleBarCore.prototype.recalculate = function () {\n            if (!this.heightAutoObserverEl ||\n                !this.contentEl ||\n                !this.contentWrapperEl ||\n                !this.wrapperEl ||\n                !this.placeholderEl)\n                return;\n            var elWindow = getElementWindow(this.el);\n            this.elStyles = elWindow.getComputedStyle(this.el);\n            this.isRtl = this.elStyles.direction === 'rtl';\n            var contentElOffsetWidth = this.contentEl.offsetWidth;\n            var isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;\n            var isWidthAuto = this.heightAutoObserverEl.offsetWidth <= 1 || contentElOffsetWidth > 0;\n            var contentWrapperElOffsetWidth = this.contentWrapperEl.offsetWidth;\n            var elOverflowX = this.elStyles.overflowX;\n            var elOverflowY = this.elStyles.overflowY;\n            this.contentEl.style.padding = \"\".concat(this.elStyles.paddingTop, \" \").concat(this.elStyles.paddingRight, \" \").concat(this.elStyles.paddingBottom, \" \").concat(this.elStyles.paddingLeft);\n            this.wrapperEl.style.margin = \"-\".concat(this.elStyles.paddingTop, \" -\").concat(this.elStyles.paddingRight, \" -\").concat(this.elStyles.paddingBottom, \" -\").concat(this.elStyles.paddingLeft);\n            var contentElScrollHeight = this.contentEl.scrollHeight;\n            var contentElScrollWidth = this.contentEl.scrollWidth;\n            this.contentWrapperEl.style.height = isHeightAuto ? 'auto' : '100%';\n            // Determine placeholder size\n            this.placeholderEl.style.width = isWidthAuto\n                ? \"\".concat(contentElOffsetWidth || contentElScrollWidth, \"px\")\n                : 'auto';\n            this.placeholderEl.style.height = \"\".concat(contentElScrollHeight, \"px\");\n            var contentWrapperElOffsetHeight = this.contentWrapperEl.offsetHeight;\n            this.axis.x.isOverflowing =\n                contentElOffsetWidth !== 0 && contentElScrollWidth > contentElOffsetWidth;\n            this.axis.y.isOverflowing =\n                contentElScrollHeight > contentWrapperElOffsetHeight;\n            // Set isOverflowing to false if user explicitely set hidden overflow\n            this.axis.x.isOverflowing =\n                elOverflowX === 'hidden' ? false : this.axis.x.isOverflowing;\n            this.axis.y.isOverflowing =\n                elOverflowY === 'hidden' ? false : this.axis.y.isOverflowing;\n            this.axis.x.forceVisible =\n                this.options.forceVisible === 'x' || this.options.forceVisible === true;\n            this.axis.y.forceVisible =\n                this.options.forceVisible === 'y' || this.options.forceVisible === true;\n            this.hideNativeScrollbar();\n            // Set isOverflowing to false if scrollbar is not necessary (content is shorter than offset)\n            var offsetForXScrollbar = this.axis.x.isOverflowing\n                ? this.scrollbarWidth\n                : 0;\n            var offsetForYScrollbar = this.axis.y.isOverflowing\n                ? this.scrollbarWidth\n                : 0;\n            this.axis.x.isOverflowing =\n                this.axis.x.isOverflowing &&\n                    contentElScrollWidth > contentWrapperElOffsetWidth - offsetForYScrollbar;\n            this.axis.y.isOverflowing =\n                this.axis.y.isOverflowing &&\n                    contentElScrollHeight >\n                        contentWrapperElOffsetHeight - offsetForXScrollbar;\n            this.axis.x.scrollbar.size = this.getScrollbarSize('x');\n            this.axis.y.scrollbar.size = this.getScrollbarSize('y');\n            if (this.axis.x.scrollbar.el)\n                this.axis.x.scrollbar.el.style.width = \"\".concat(this.axis.x.scrollbar.size, \"px\");\n            if (this.axis.y.scrollbar.el)\n                this.axis.y.scrollbar.el.style.height = \"\".concat(this.axis.y.scrollbar.size, \"px\");\n            this.positionScrollbar('x');\n            this.positionScrollbar('y');\n            this.toggleTrackVisibility('x');\n            this.toggleTrackVisibility('y');\n        };\n        /**\n         * Calculate scrollbar size\n         */\n        SimpleBarCore.prototype.getScrollbarSize = function (axis) {\n            var _a, _b;\n            if (axis === void 0) { axis = 'y'; }\n            if (!this.axis[axis].isOverflowing || !this.contentEl) {\n                return 0;\n            }\n            var contentSize = this.contentEl[this.axis[axis].scrollSizeAttr];\n            var trackSize = (_b = (_a = this.axis[axis].track.el) === null || _a === void 0 ? void 0 : _a[this.axis[axis].offsetSizeAttr]) !== null && _b !== void 0 ? _b : 0;\n            var scrollbarRatio = trackSize / contentSize;\n            var scrollbarSize;\n            // Calculate new height/position of drag handle.\n            scrollbarSize = Math.max(~~(scrollbarRatio * trackSize), this.options.scrollbarMinSize);\n            if (this.options.scrollbarMaxSize) {\n                scrollbarSize = Math.min(scrollbarSize, this.options.scrollbarMaxSize);\n            }\n            return scrollbarSize;\n        };\n        SimpleBarCore.prototype.positionScrollbar = function (axis) {\n            var _a, _b, _c;\n            if (axis === void 0) { axis = 'y'; }\n            var scrollbar = this.axis[axis].scrollbar;\n            if (!this.axis[axis].isOverflowing ||\n                !this.contentWrapperEl ||\n                !scrollbar.el ||\n                !this.elStyles) {\n                return;\n            }\n            var contentSize = this.contentWrapperEl[this.axis[axis].scrollSizeAttr];\n            var trackSize = ((_a = this.axis[axis].track.el) === null || _a === void 0 ? void 0 : _a[this.axis[axis].offsetSizeAttr]) || 0;\n            var hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n            var scrollOffset = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n            scrollOffset =\n                axis === 'x' &&\n                    this.isRtl &&\n                    ((_b = SimpleBarCore.getRtlHelpers()) === null || _b === void 0 ? void 0 : _b.isScrollOriginAtZero)\n                    ? -scrollOffset\n                    : scrollOffset;\n            if (axis === 'x' && this.isRtl) {\n                scrollOffset = ((_c = SimpleBarCore.getRtlHelpers()) === null || _c === void 0 ? void 0 : _c.isScrollingToNegative)\n                    ? scrollOffset\n                    : -scrollOffset;\n            }\n            var scrollPourcent = scrollOffset / (contentSize - hostSize);\n            var handleOffset = ~~((trackSize - scrollbar.size) * scrollPourcent);\n            handleOffset =\n                axis === 'x' && this.isRtl\n                    ? -handleOffset + (trackSize - scrollbar.size)\n                    : handleOffset;\n            scrollbar.el.style.transform =\n                axis === 'x'\n                    ? \"translate3d(\".concat(handleOffset, \"px, 0, 0)\")\n                    : \"translate3d(0, \".concat(handleOffset, \"px, 0)\");\n        };\n        SimpleBarCore.prototype.toggleTrackVisibility = function (axis) {\n            if (axis === void 0) { axis = 'y'; }\n            var track = this.axis[axis].track.el;\n            var scrollbar = this.axis[axis].scrollbar.el;\n            if (!track || !scrollbar || !this.contentWrapperEl)\n                return;\n            if (this.axis[axis].isOverflowing || this.axis[axis].forceVisible) {\n                track.style.visibility = 'visible';\n                this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'scroll';\n                this.el.classList.add(\"\".concat(this.classNames.scrollable, \"-\").concat(axis));\n            }\n            else {\n                track.style.visibility = 'hidden';\n                this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'hidden';\n                this.el.classList.remove(\"\".concat(this.classNames.scrollable, \"-\").concat(axis));\n            }\n            // Even if forceVisible is enabled, scrollbar itself should be hidden\n            if (this.axis[axis].isOverflowing) {\n                scrollbar.style.display = 'block';\n            }\n            else {\n                scrollbar.style.display = 'none';\n            }\n        };\n        SimpleBarCore.prototype.showScrollbar = function (axis) {\n            if (axis === void 0) { axis = 'y'; }\n            if (this.axis[axis].isOverflowing && !this.axis[axis].scrollbar.isVisible) {\n                addClasses(this.axis[axis].scrollbar.el, this.classNames.visible);\n                this.axis[axis].scrollbar.isVisible = true;\n            }\n        };\n        SimpleBarCore.prototype.hideScrollbar = function (axis) {\n            if (axis === void 0) { axis = 'y'; }\n            if (this.axis[axis].isOverflowing && this.axis[axis].scrollbar.isVisible) {\n                removeClasses(this.axis[axis].scrollbar.el, this.classNames.visible);\n                this.axis[axis].scrollbar.isVisible = false;\n            }\n        };\n        SimpleBarCore.prototype.hideNativeScrollbar = function () {\n            if (!this.offsetEl)\n                return;\n            this.offsetEl.style[this.isRtl ? 'left' : 'right'] =\n                this.axis.y.isOverflowing || this.axis.y.forceVisible\n                    ? \"-\".concat(this.scrollbarWidth, \"px\")\n                    : '0px';\n            this.offsetEl.style.bottom =\n                this.axis.x.isOverflowing || this.axis.x.forceVisible\n                    ? \"-\".concat(this.scrollbarWidth, \"px\")\n                    : '0px';\n        };\n        SimpleBarCore.prototype.onMouseMoveForAxis = function (axis) {\n            if (axis === void 0) { axis = 'y'; }\n            var currentAxis = this.axis[axis];\n            if (!currentAxis.track.el || !currentAxis.scrollbar.el)\n                return;\n            currentAxis.track.rect = currentAxis.track.el.getBoundingClientRect();\n            currentAxis.scrollbar.rect =\n                currentAxis.scrollbar.el.getBoundingClientRect();\n            if (this.isWithinBounds(currentAxis.track.rect)) {\n                this.showScrollbar(axis);\n                addClasses(currentAxis.track.el, this.classNames.hover);\n                if (this.isWithinBounds(currentAxis.scrollbar.rect)) {\n                    addClasses(currentAxis.scrollbar.el, this.classNames.hover);\n                }\n                else {\n                    removeClasses(currentAxis.scrollbar.el, this.classNames.hover);\n                }\n            }\n            else {\n                removeClasses(currentAxis.track.el, this.classNames.hover);\n                if (this.options.autoHide) {\n                    this.hideScrollbar(axis);\n                }\n            }\n        };\n        SimpleBarCore.prototype.onMouseLeaveForAxis = function (axis) {\n            if (axis === void 0) { axis = 'y'; }\n            removeClasses(this.axis[axis].track.el, this.classNames.hover);\n            removeClasses(this.axis[axis].scrollbar.el, this.classNames.hover);\n            if (this.options.autoHide) {\n                this.hideScrollbar(axis);\n            }\n        };\n        /**\n         * on scrollbar handle drag movement starts\n         */\n        SimpleBarCore.prototype.onDragStart = function (e, axis) {\n            var _a;\n            if (axis === void 0) { axis = 'y'; }\n            var elDocument = getElementDocument(this.el);\n            var elWindow = getElementWindow(this.el);\n            var scrollbar = this.axis[axis].scrollbar;\n            // Measure how far the user's mouse is from the top of the scrollbar drag handle.\n            var eventOffset = axis === 'y' ? e.pageY : e.pageX;\n            this.axis[axis].dragOffset =\n                eventOffset - (((_a = scrollbar.rect) === null || _a === void 0 ? void 0 : _a[this.axis[axis].offsetAttr]) || 0);\n            this.draggedAxis = axis;\n            addClasses(this.el, this.classNames.dragging);\n            elDocument.addEventListener('mousemove', this.drag, true);\n            elDocument.addEventListener('mouseup', this.onEndDrag, true);\n            if (this.removePreventClickId === null) {\n                elDocument.addEventListener('click', this.preventClick, true);\n                elDocument.addEventListener('dblclick', this.preventClick, true);\n            }\n            else {\n                elWindow.clearTimeout(this.removePreventClickId);\n                this.removePreventClickId = null;\n            }\n        };\n        SimpleBarCore.prototype.onTrackClick = function (e, axis) {\n            var _this = this;\n            var _a, _b, _c, _d;\n            if (axis === void 0) { axis = 'y'; }\n            var currentAxis = this.axis[axis];\n            if (!this.options.clickOnTrack ||\n                !currentAxis.scrollbar.el ||\n                !this.contentWrapperEl)\n                return;\n            // Preventing the event's default to trigger click underneath\n            e.preventDefault();\n            var elWindow = getElementWindow(this.el);\n            this.axis[axis].scrollbar.rect =\n                currentAxis.scrollbar.el.getBoundingClientRect();\n            var scrollbar = this.axis[axis].scrollbar;\n            var scrollbarOffset = (_b = (_a = scrollbar.rect) === null || _a === void 0 ? void 0 : _a[this.axis[axis].offsetAttr]) !== null && _b !== void 0 ? _b : 0;\n            var hostSize = parseInt((_d = (_c = this.elStyles) === null || _c === void 0 ? void 0 : _c[this.axis[axis].sizeAttr]) !== null && _d !== void 0 ? _d : '0px', 10);\n            var scrolled = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n            var t = axis === 'y'\n                ? this.mouseY - scrollbarOffset\n                : this.mouseX - scrollbarOffset;\n            var dir = t < 0 ? -1 : 1;\n            var scrollSize = dir === -1 ? scrolled - hostSize : scrolled + hostSize;\n            var speed = 40;\n            var scrollTo = function () {\n                if (!_this.contentWrapperEl)\n                    return;\n                if (dir === -1) {\n                    if (scrolled > scrollSize) {\n                        scrolled -= speed;\n                        _this.contentWrapperEl[_this.axis[axis].scrollOffsetAttr] = scrolled;\n                        elWindow.requestAnimationFrame(scrollTo);\n                    }\n                }\n                else {\n                    if (scrolled < scrollSize) {\n                        scrolled += speed;\n                        _this.contentWrapperEl[_this.axis[axis].scrollOffsetAttr] = scrolled;\n                        elWindow.requestAnimationFrame(scrollTo);\n                    }\n                }\n            };\n            scrollTo();\n        };\n        /**\n         * Getter for content element\n         */\n        SimpleBarCore.prototype.getContentElement = function () {\n            return this.contentEl;\n        };\n        /**\n         * Getter for original scrolling element\n         */\n        SimpleBarCore.prototype.getScrollElement = function () {\n            return this.contentWrapperEl;\n        };\n        SimpleBarCore.prototype.removeListeners = function () {\n            var elWindow = getElementWindow(this.el);\n            // Event listeners\n            this.el.removeEventListener('mouseenter', this.onMouseEnter);\n            this.el.removeEventListener('pointerdown', this.onPointerEvent, true);\n            this.el.removeEventListener('mousemove', this.onMouseMove);\n            this.el.removeEventListener('mouseleave', this.onMouseLeave);\n            if (this.contentWrapperEl) {\n                this.contentWrapperEl.removeEventListener('scroll', this.onScroll);\n            }\n            elWindow.removeEventListener('resize', this.onWindowResize);\n            if (this.mutationObserver) {\n                this.mutationObserver.disconnect();\n            }\n            if (this.resizeObserver) {\n                this.resizeObserver.disconnect();\n            }\n            // Cancel all debounced functions\n            this.onMouseMove.cancel();\n            this.onWindowResize.cancel();\n            this.onStopScrolling.cancel();\n            this.onMouseEntered.cancel();\n        };\n        /**\n         * Remove all listeners from DOM nodes\n         */\n        SimpleBarCore.prototype.unMount = function () {\n            this.removeListeners();\n        };\n        /**\n         * Check if mouse is within bounds\n         */\n        SimpleBarCore.prototype.isWithinBounds = function (bbox) {\n            return (this.mouseX >= bbox.left &&\n                this.mouseX <= bbox.left + bbox.width &&\n                this.mouseY >= bbox.top &&\n                this.mouseY <= bbox.top + bbox.height);\n        };\n        /**\n         * Find element children matches query\n         */\n        SimpleBarCore.prototype.findChild = function (el, query) {\n            var matches = el.matches ||\n                el.webkitMatchesSelector ||\n                el.mozMatchesSelector ||\n                el.msMatchesSelector;\n            return Array.prototype.filter.call(el.children, function (child) {\n                return matches.call(child, query);\n            })[0];\n        };\n        SimpleBarCore.rtlHelpers = null;\n        SimpleBarCore.defaultOptions = {\n            forceVisible: false,\n            clickOnTrack: true,\n            scrollbarMinSize: 25,\n            scrollbarMaxSize: 0,\n            ariaLabel: 'scrollable content',\n            classNames: {\n                contentEl: 'simplebar-content',\n                contentWrapper: 'simplebar-content-wrapper',\n                offset: 'simplebar-offset',\n                mask: 'simplebar-mask',\n                wrapper: 'simplebar-wrapper',\n                placeholder: 'simplebar-placeholder',\n                scrollbar: 'simplebar-scrollbar',\n                track: 'simplebar-track',\n                heightAutoObserverWrapperEl: 'simplebar-height-auto-observer-wrapper',\n                heightAutoObserverEl: 'simplebar-height-auto-observer',\n                visible: 'simplebar-visible',\n                horizontal: 'simplebar-horizontal',\n                vertical: 'simplebar-vertical',\n                hover: 'simplebar-hover',\n                dragging: 'simplebar-dragging',\n                scrolling: 'simplebar-scrolling',\n                scrollable: 'simplebar-scrollable',\n                mouseEntered: 'simplebar-mouse-entered'\n            },\n            scrollableNode: null,\n            contentNode: null,\n            autoHide: true\n        };\n        /**\n         * Static functions\n         */\n        SimpleBarCore.getOptions = getOptions;\n        SimpleBarCore.helpers = helpers;\n        return SimpleBarCore;\n    }());\n\n    return SimpleBarCore;\n\n}));\n//# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/simplebar-core/dist/index.cjs\n");

/***/ })

};
;